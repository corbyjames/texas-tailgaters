name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_ENV: test
  BASE_URL: http://localhost:5173

jobs:
  # Smoke tests - quick validation
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Start application
      run: |
        npm run dev &
        npx wait-on $BASE_URL --timeout 60000

    - name: Run smoke tests
      run: npm run test:smoke

    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  # Full regression tests
  regression-tests:
    name: Full Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: smoke-tests
    if: success()
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start application
      run: |
        npm run dev &
        npx wait-on $BASE_URL --timeout 60000

    - name: Run E2E tests
      run: npx playwright test -c e2e/playwright.config.ts --project=${{ matrix.browser }}-desktop
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Mobile tests
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: smoke-tests
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium webkit

    - name: Start application
      run: |
        npm run dev &
        npx wait-on $BASE_URL --timeout 60000

    - name: Run mobile tests
      run: npm run test:mobile

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Visual regression tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: smoke-tests
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Start application
      run: |
        npm run dev &
        npx wait-on $BASE_URL --timeout 60000

    - name: Run visual tests
      run: npm run test:visual

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: smoke-tests
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Start application
      run: |
        npm run dev &
        npx wait-on $BASE_URL --timeout 60000

    - name: Run performance tests
      run: npx playwright test -c e2e/playwright.config.ts --project=performance

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Publish test results
  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, mobile-tests, visual-tests, performance-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results

    - name: Merge test results
      run: |
        mkdir -p merged-results
        find all-test-results -name "*.json" -type f -exec cp {} merged-results/ \;
        find all-test-results -name "*.xml" -type f -exec cp {} merged-results/ \;

    - name: Publish Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: E2E Test Results
        path: 'merged-results/*.xml'
        reporter: jest-junit
        fail-on-error: false

    - name: Create test summary
      if: always()
      run: |
        echo "## üß™ E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Suites:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Smoke Tests: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üîÑ Regression Tests: ${{ needs.regression-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üì± Mobile Tests: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üëÅÔ∏è Visual Tests: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ö° Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- Test reports and screenshots are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
        echo "- Visual regression baselines are updated automatically on main branch" >> $GITHUB_STEP_SUMMARY

  # Notify on failure
  notify-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, mobile-tests, visual-tests, performance-tests]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify team of test failures
      run: |
        echo "‚ùå E2E tests failed on main branch"
        echo "Please check the test results and fix any failing tests"
        # Add actual notification logic here (Slack, email, etc.)

# Workflow for updating visual baselines
update-baselines:
  name: Update Visual Baselines
  runs-on: ubuntu-latest
  if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[update-baselines]')
  
  steps:
  - name: Checkout code
    uses: actions/checkout@v4
    with:
      token: ${{ secrets.GITHUB_TOKEN }}

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '18'
      cache: 'npm'

  - name: Install dependencies
    run: npm ci

  - name: Install Playwright
    run: npx playwright install --with-deps chromium

  - name: Start application
    run: |
      npm run dev &
      npx wait-on $BASE_URL --timeout 60000

  - name: Update visual baselines
    run: npm run test:update-snapshots

  - name: Commit updated baselines
    run: |
      git config --local user.email "action@github.com"
      git config --local user.name "GitHub Action"
      git add -A
      git diff --staged --quiet || git commit -m "Update visual regression baselines [skip ci]"
      git push